// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: protos/listing/listing.proto

package listing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ListingService_GetListings_FullMethodName         = "/keyfi_protos.listing.ListingService/GetListings"
	ListingService_GetListingByAddress_FullMethodName = "/keyfi_protos.listing.ListingService/GetListingByAddress"
	ListingService_GetListingDetail_FullMethodName    = "/keyfi_protos.listing.ListingService/GetListingDetail"
)

// ListingServiceClient is the client API for ListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingServiceClient interface {
	GetListings(ctx context.Context, in *GetListingsRequest, opts ...grpc.CallOption) (*GetListingsResponse, error)
	GetListingByAddress(ctx context.Context, in *GetListingByAddressRequest, opts ...grpc.CallOption) (*GetListingByAddressResponse, error)
	GetListingDetail(ctx context.Context, in *GetListingDetailRequest, opts ...grpc.CallOption) (*GetListingDetailResponse, error)
}

type listingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListingServiceClient(cc grpc.ClientConnInterface) ListingServiceClient {
	return &listingServiceClient{cc}
}

func (c *listingServiceClient) GetListings(ctx context.Context, in *GetListingsRequest, opts ...grpc.CallOption) (*GetListingsResponse, error) {
	out := new(GetListingsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetListings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetListingByAddress(ctx context.Context, in *GetListingByAddressRequest, opts ...grpc.CallOption) (*GetListingByAddressResponse, error) {
	out := new(GetListingByAddressResponse)
	err := c.cc.Invoke(ctx, ListingService_GetListingByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetListingDetail(ctx context.Context, in *GetListingDetailRequest, opts ...grpc.CallOption) (*GetListingDetailResponse, error) {
	out := new(GetListingDetailResponse)
	err := c.cc.Invoke(ctx, ListingService_GetListingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingServiceServer is the server API for ListingService service.
// All implementations must embed UnimplementedListingServiceServer
// for forward compatibility
type ListingServiceServer interface {
	GetListings(context.Context, *GetListingsRequest) (*GetListingsResponse, error)
	GetListingByAddress(context.Context, *GetListingByAddressRequest) (*GetListingByAddressResponse, error)
	GetListingDetail(context.Context, *GetListingDetailRequest) (*GetListingDetailResponse, error)
	mustEmbedUnimplementedListingServiceServer()
}

// UnimplementedListingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListingServiceServer struct {
}

func (UnimplementedListingServiceServer) GetListings(context.Context, *GetListingsRequest) (*GetListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListings not implemented")
}
func (UnimplementedListingServiceServer) GetListingByAddress(context.Context, *GetListingByAddressRequest) (*GetListingByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListingByAddress not implemented")
}
func (UnimplementedListingServiceServer) GetListingDetail(context.Context, *GetListingDetailRequest) (*GetListingDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListingDetail not implemented")
}
func (UnimplementedListingServiceServer) mustEmbedUnimplementedListingServiceServer() {}

// UnsafeListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingServiceServer will
// result in compilation errors.
type UnsafeListingServiceServer interface {
	mustEmbedUnimplementedListingServiceServer()
}

func RegisterListingServiceServer(s grpc.ServiceRegistrar, srv ListingServiceServer) {
	s.RegisterService(&ListingService_ServiceDesc, srv)
}

func _ListingService_GetListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetListings(ctx, req.(*GetListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetListingByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetListingByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetListingByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetListingByAddress(ctx, req.(*GetListingByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetListingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetListingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetListingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetListingDetail(ctx, req.(*GetListingDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingService_ServiceDesc is the grpc.ServiceDesc for ListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyfi_protos.listing.ListingService",
	HandlerType: (*ListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListings",
			Handler:    _ListingService_GetListings_Handler,
		},
		{
			MethodName: "GetListingByAddress",
			Handler:    _ListingService_GetListingByAddress_Handler,
		},
		{
			MethodName: "GetListingDetail",
			Handler:    _ListingService_GetListingDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/listing/listing.proto",
}
