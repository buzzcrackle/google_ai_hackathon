/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: ai/ai.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace keyfi_protos.ai {
    export class SinglePromptRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prompt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prompt" in data && data.prompt != undefined) {
                    this.prompt = data.prompt;
                }
            }
        }
        get prompt() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set prompt(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            prompt?: string;
        }): SinglePromptRequest {
            const message = new SinglePromptRequest({});
            if (data.prompt != null) {
                message.prompt = data.prompt;
            }
            return message;
        }
        toObject() {
            const data: {
                prompt?: string;
            } = {};
            if (this.prompt != null) {
                data.prompt = this.prompt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prompt.length)
                writer.writeString(1, this.prompt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SinglePromptRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SinglePromptRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.prompt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SinglePromptRequest {
            return SinglePromptRequest.deserialize(bytes);
        }
    }
    export class SinglePromptResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            response?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set response(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            response?: string;
        }): SinglePromptResponse {
            const message = new SinglePromptResponse({});
            if (data.response != null) {
                message.response = data.response;
            }
            return message;
        }
        toObject() {
            const data: {
                response?: string;
            } = {};
            if (this.response != null) {
                data.response = this.response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.response.length)
                writer.writeString(1, this.response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SinglePromptResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SinglePromptResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.response = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SinglePromptResponse {
            return SinglePromptResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAIServiceService {
        static definition = {
            SinglePrompt: {
                path: "/keyfi_protos.ai.AIService/SinglePrompt",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SinglePromptRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SinglePromptRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SinglePromptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SinglePromptResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SinglePrompt(call: grpc_1.ServerUnaryCall<SinglePromptRequest, SinglePromptResponse>, callback: grpc_1.sendUnaryData<SinglePromptResponse>): void;
    }
    export class AIServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAIServiceService.definition, "AIService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SinglePrompt: GrpcUnaryServiceInterface<SinglePromptRequest, SinglePromptResponse> = (message: SinglePromptRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SinglePromptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SinglePromptResponse>, callback?: grpc_1.requestCallback<SinglePromptResponse>): grpc_1.ClientUnaryCall => {
            return super.SinglePrompt(message, metadata, options, callback);
        };
    }
}
