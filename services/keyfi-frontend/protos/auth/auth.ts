// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "auth/auth.proto" (package "keyfi_protos.auth", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message keyfi_protos.auth.AuthRequest
 */
export interface AuthRequest {
    /**
     * @generated from protobuf field: string walletAddress = 1;
     */
    walletAddress: string;
    /**
     * @generated from protobuf field: string signature = 2;
     */
    signature: string;
    /**
     * @generated from protobuf field: int64 signatureExpiry = 3;
     */
    signatureExpiry: string;
    /**
     * @generated from protobuf field: string firstName = 4;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string lastName = 5;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string middleName = 6;
     */
    middleName: string;
}
/**
 * @generated from protobuf message keyfi_protos.auth.AuthResponse
 */
export interface AuthResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthRequest$Type extends MessageType<AuthRequest> {
    constructor() {
        super("keyfi_protos.auth.AuthRequest", [
            { no: 1, name: "walletAddress", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signatureExpiry", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "firstName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "lastName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "middleName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthRequest>): AuthRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.walletAddress = "";
        message.signature = "";
        message.signatureExpiry = "0";
        message.firstName = "";
        message.lastName = "";
        message.middleName = "";
        if (value !== undefined)
            reflectionMergePartial<AuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthRequest): AuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string walletAddress */ 1:
                    message.walletAddress = reader.string();
                    break;
                case /* string signature */ 2:
                    message.signature = reader.string();
                    break;
                case /* int64 signatureExpiry */ 3:
                    message.signatureExpiry = reader.int64().toString();
                    break;
                case /* string firstName */ 4:
                    message.firstName = reader.string();
                    break;
                case /* string lastName */ 5:
                    message.lastName = reader.string();
                    break;
                case /* string middleName */ 6:
                    message.middleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string walletAddress = 1; */
        if (message.walletAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.walletAddress);
        /* string signature = 2; */
        if (message.signature !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signature);
        /* int64 signatureExpiry = 3; */
        if (message.signatureExpiry !== "0")
            writer.tag(3, WireType.Varint).int64(message.signatureExpiry);
        /* string firstName = 4; */
        if (message.firstName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* string lastName = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        /* string middleName = 6; */
        if (message.middleName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.middleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.auth.AuthRequest
 */
export const AuthRequest = new AuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthResponse$Type extends MessageType<AuthResponse> {
    constructor() {
        super("keyfi_protos.auth.AuthResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AuthResponse>): AuthResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<AuthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthResponse): AuthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.auth.AuthResponse
 */
export const AuthResponse = new AuthResponse$Type();
/**
 * @generated ServiceType for protobuf service keyfi_protos.auth.AuthenticationService
 */
export const AuthenticationService = new ServiceType("keyfi_protos.auth.AuthenticationService", [
    { name: "Login", options: {}, I: AuthRequest, O: AuthResponse },
    { name: "Register", options: {}, I: AuthRequest, O: AuthResponse }
]);
