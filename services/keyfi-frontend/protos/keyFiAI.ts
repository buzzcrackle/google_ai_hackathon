// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "keyFiAI.proto" (package "keyfiai", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message keyfiai.SinglePromptRequest
 */
export interface SinglePromptRequest {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
}
/**
 * @generated from protobuf message keyfiai.SinglePromptResponse
 */
export interface SinglePromptResponse {
    /**
     * @generated from protobuf field: string response = 1;
     */
    response: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SinglePromptRequest$Type extends MessageType<SinglePromptRequest> {
    constructor() {
        super("keyfiai.SinglePromptRequest", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SinglePromptRequest>): SinglePromptRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prompt = "";
        if (value !== undefined)
            reflectionMergePartial<SinglePromptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SinglePromptRequest): SinglePromptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SinglePromptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfiai.SinglePromptRequest
 */
export const SinglePromptRequest = new SinglePromptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SinglePromptResponse$Type extends MessageType<SinglePromptResponse> {
    constructor() {
        super("keyfiai.SinglePromptResponse", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SinglePromptResponse>): SinglePromptResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        if (value !== undefined)
            reflectionMergePartial<SinglePromptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SinglePromptResponse): SinglePromptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SinglePromptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfiai.SinglePromptResponse
 */
export const SinglePromptResponse = new SinglePromptResponse$Type();
/**
 * @generated ServiceType for protobuf service keyfiai.KeyFiAIService
 */
export const KeyFiAIService = new ServiceType("keyfiai.KeyFiAIService", [
    { name: "SinglePrompt", options: {}, I: SinglePromptRequest, O: SinglePromptResponse }
]);
