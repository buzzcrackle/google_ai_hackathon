// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "listing/listing.proto" (package "keyfi_protos.listing", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message keyfi_protos.listing.Listing
 */
export interface Listing {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: string city = 2;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
    /**
     * @generated from protobuf field: int32 zipcode = 4;
     */
    zipcode: number;
    /**
     * @generated from protobuf field: int32 price = 5;
     */
    price: number;
    /**
     * @generated from protobuf field: string imageKey = 6;
     */
    imageKey: string;
    /**
     * @generated from protobuf field: string listingId = 7;
     */
    listingId: string;
    /**
     * @generated from protobuf field: float coordLat = 8;
     */
    coordLat: number;
    /**
     * @generated from protobuf field: float coordLong = 9;
     */
    coordLong: number;
    /**
     * @generated from protobuf field: int32 area = 10;
     */
    area: number;
    /**
     * @generated from protobuf field: string schoolDistrict = 11;
     */
    schoolDistrict: string;
}
/**
 * @generated from protobuf message keyfi_protos.listing.GetListingsRequest
 */
export interface GetListingsRequest {
    /**
     * @generated from protobuf field: repeated string zipcodes = 1;
     */
    zipcodes: string[];
    /**
     * @generated from protobuf field: repeated string cities = 2;
     */
    cities: string[];
}
/**
 * @generated from protobuf message keyfi_protos.listing.GetListingsResponse
 */
export interface GetListingsResponse {
    /**
     * @generated from protobuf field: repeated keyfi_protos.listing.Listing listings = 1;
     */
    listings: Listing[];
}
/**
 * @generated from protobuf message keyfi_protos.listing.GetListingByAddressRequest
 */
export interface GetListingByAddressRequest {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * @generated from protobuf message keyfi_protos.listing.GetListingByAddressResponse
 */
export interface GetListingByAddressResponse {
    /**
     * @generated from protobuf field: repeated keyfi_protos.listing.Listing listings = 1;
     */
    listings: Listing[];
}
/**
 * @generated from protobuf message keyfi_protos.listing.GetListingDetailRequest
 */
export interface GetListingDetailRequest {
    /**
     * @generated from protobuf field: string listingId = 1;
     */
    listingId: string;
}
/**
 * @generated from protobuf message keyfi_protos.listing.GetListingDetailResponse
 */
export interface GetListingDetailResponse {
    /**
     * @generated from protobuf field: keyfi_protos.listing.Listing listing = 1;
     */
    listing?: Listing;
}
// @generated message type with reflection information, may provide speed optimized methods
class Listing$Type extends MessageType<Listing> {
    constructor() {
        super("keyfi_protos.listing.Listing", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "zipcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "price", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "imageKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "listingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "coordLat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "coordLong", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "area", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "schoolDistrict", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Listing>): Listing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.city = "";
        message.state = "";
        message.zipcode = 0;
        message.price = 0;
        message.imageKey = "";
        message.listingId = "";
        message.coordLat = 0;
        message.coordLong = 0;
        message.area = 0;
        message.schoolDistrict = "";
        if (value !== undefined)
            reflectionMergePartial<Listing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Listing): Listing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string city */ 2:
                    message.city = reader.string();
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                case /* int32 zipcode */ 4:
                    message.zipcode = reader.int32();
                    break;
                case /* int32 price */ 5:
                    message.price = reader.int32();
                    break;
                case /* string imageKey */ 6:
                    message.imageKey = reader.string();
                    break;
                case /* string listingId */ 7:
                    message.listingId = reader.string();
                    break;
                case /* float coordLat */ 8:
                    message.coordLat = reader.float();
                    break;
                case /* float coordLong */ 9:
                    message.coordLong = reader.float();
                    break;
                case /* int32 area */ 10:
                    message.area = reader.int32();
                    break;
                case /* string schoolDistrict */ 11:
                    message.schoolDistrict = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Listing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string city = 2; */
        if (message.city !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.city);
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        /* int32 zipcode = 4; */
        if (message.zipcode !== 0)
            writer.tag(4, WireType.Varint).int32(message.zipcode);
        /* int32 price = 5; */
        if (message.price !== 0)
            writer.tag(5, WireType.Varint).int32(message.price);
        /* string imageKey = 6; */
        if (message.imageKey !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.imageKey);
        /* string listingId = 7; */
        if (message.listingId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.listingId);
        /* float coordLat = 8; */
        if (message.coordLat !== 0)
            writer.tag(8, WireType.Bit32).float(message.coordLat);
        /* float coordLong = 9; */
        if (message.coordLong !== 0)
            writer.tag(9, WireType.Bit32).float(message.coordLong);
        /* int32 area = 10; */
        if (message.area !== 0)
            writer.tag(10, WireType.Varint).int32(message.area);
        /* string schoolDistrict = 11; */
        if (message.schoolDistrict !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.schoolDistrict);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.Listing
 */
export const Listing = new Listing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListingsRequest$Type extends MessageType<GetListingsRequest> {
    constructor() {
        super("keyfi_protos.listing.GetListingsRequest", [
            { no: 1, name: "zipcodes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cities", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetListingsRequest>): GetListingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.zipcodes = [];
        message.cities = [];
        if (value !== undefined)
            reflectionMergePartial<GetListingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListingsRequest): GetListingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string zipcodes */ 1:
                    message.zipcodes.push(reader.string());
                    break;
                case /* repeated string cities */ 2:
                    message.cities.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string zipcodes = 1; */
        for (let i = 0; i < message.zipcodes.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.zipcodes[i]);
        /* repeated string cities = 2; */
        for (let i = 0; i < message.cities.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.cities[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.GetListingsRequest
 */
export const GetListingsRequest = new GetListingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListingsResponse$Type extends MessageType<GetListingsResponse> {
    constructor() {
        super("keyfi_protos.listing.GetListingsResponse", [
            { no: 1, name: "listings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Listing }
        ]);
    }
    create(value?: PartialMessage<GetListingsResponse>): GetListingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.listings = [];
        if (value !== undefined)
            reflectionMergePartial<GetListingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListingsResponse): GetListingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated keyfi_protos.listing.Listing listings */ 1:
                    message.listings.push(Listing.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated keyfi_protos.listing.Listing listings = 1; */
        for (let i = 0; i < message.listings.length; i++)
            Listing.internalBinaryWrite(message.listings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.GetListingsResponse
 */
export const GetListingsResponse = new GetListingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListingByAddressRequest$Type extends MessageType<GetListingByAddressRequest> {
    constructor() {
        super("keyfi_protos.listing.GetListingByAddressRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetListingByAddressRequest>): GetListingByAddressRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<GetListingByAddressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListingByAddressRequest): GetListingByAddressRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListingByAddressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.GetListingByAddressRequest
 */
export const GetListingByAddressRequest = new GetListingByAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListingByAddressResponse$Type extends MessageType<GetListingByAddressResponse> {
    constructor() {
        super("keyfi_protos.listing.GetListingByAddressResponse", [
            { no: 1, name: "listings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Listing }
        ]);
    }
    create(value?: PartialMessage<GetListingByAddressResponse>): GetListingByAddressResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.listings = [];
        if (value !== undefined)
            reflectionMergePartial<GetListingByAddressResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListingByAddressResponse): GetListingByAddressResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated keyfi_protos.listing.Listing listings */ 1:
                    message.listings.push(Listing.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListingByAddressResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated keyfi_protos.listing.Listing listings = 1; */
        for (let i = 0; i < message.listings.length; i++)
            Listing.internalBinaryWrite(message.listings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.GetListingByAddressResponse
 */
export const GetListingByAddressResponse = new GetListingByAddressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListingDetailRequest$Type extends MessageType<GetListingDetailRequest> {
    constructor() {
        super("keyfi_protos.listing.GetListingDetailRequest", [
            { no: 1, name: "listingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetListingDetailRequest>): GetListingDetailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.listingId = "";
        if (value !== undefined)
            reflectionMergePartial<GetListingDetailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListingDetailRequest): GetListingDetailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string listingId */ 1:
                    message.listingId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListingDetailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string listingId = 1; */
        if (message.listingId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.listingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.GetListingDetailRequest
 */
export const GetListingDetailRequest = new GetListingDetailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListingDetailResponse$Type extends MessageType<GetListingDetailResponse> {
    constructor() {
        super("keyfi_protos.listing.GetListingDetailResponse", [
            { no: 1, name: "listing", kind: "message", T: () => Listing }
        ]);
    }
    create(value?: PartialMessage<GetListingDetailResponse>): GetListingDetailResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetListingDetailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListingDetailResponse): GetListingDetailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* keyfi_protos.listing.Listing listing */ 1:
                    message.listing = Listing.internalBinaryRead(reader, reader.uint32(), options, message.listing);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListingDetailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* keyfi_protos.listing.Listing listing = 1; */
        if (message.listing)
            Listing.internalBinaryWrite(message.listing, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message keyfi_protos.listing.GetListingDetailResponse
 */
export const GetListingDetailResponse = new GetListingDetailResponse$Type();
/**
 * @generated ServiceType for protobuf service keyfi_protos.listing.ListingService
 */
export const ListingService = new ServiceType("keyfi_protos.listing.ListingService", [
    { name: "GetListings", options: {}, I: GetListingsRequest, O: GetListingsResponse },
    { name: "GetListingByAddress", options: {}, I: GetListingByAddressRequest, O: GetListingByAddressResponse },
    { name: "GetListingDetail", options: {}, I: GetListingDetailRequest, O: GetListingDetailResponse }
]);
